Promise in JavaScript

 ~ A promise is a JavaScript object that allows you to make asynchronous(aka async) calls. It produces a value when the async operation completes successfully or produces an error if it doesn't complete.

- You can create a promise using the constructor method,

  let promise = new Promise(function(resolve, reject) {    
    // Do something and either resolve or reject
});

~ We need to pass a function to the Promise Constructor. That function is called the executor function. The executor function takes two arguments, resolve and reject. These two are callback functions for the executor to announce an outcome.
~ The resolve method indicates successful completion of the task(fetching water), and the reject method indicates an error(the disaster).

   - Example of the resolve:

let promise = new Promise(function(resolve, reject) {
    // Got the water
    let value = 'getting water from well';
    resolve(value); // An assurance of getting the water successfully
});

 -Example of the reject:

let promise = new Promise(function(resolve, reject) {
    // OOPS, Jack fell down and broke his crown. 
    // And Jill came tumbling after.
    reject(new Error("Disaster! can't get water from the well")); // Throwing and error
});

**The promise object should be capable of informing the consumer(developer) when the execution has been started, completed (resolved), or returned with an error (rejected).

      ~ A promise object has the following internal properties,
	(Assume that two children Jack and Jill have to get the water from the well)

     1) state: This property can have the following values,
	- pending: When the execution function starts. In our story, when Jack and Jill start to fetch the water.
	- fulfilled: When the promise resolves successfully. Like, Jack and Jill are back with the water.
    	- rejected: When the promise is rejected. Example. Jack and Jill couldn't complete the mission.
     
     2) result: This property can have the following values,
	- undefined: Initially, when the state value is pending.
	- value: When the promise is resolved(value).
	- error: When the promise is rejected.	

 ~ So the consumers need to rely on the promise object to know the state and value/error.

 ~ we have three important handler methods, .then(), .catch(), and .finally(). These methods help us create a link between the executor and the consumer when a promise resolves or is rejected.we have three important handler methods, .then(), .catch(), and .finally(). These methods help us create a link between the executor and the consumer when a promise resolves or is rejected.

 ~ The .then() Promise Handler
We get a .then() method from every promise. The sole purpose of this method is to let the consumer know about the outcome of a promise. It accepts two functions as arguments, result and error.

promise.then(
  (result) => { 
     console.log(result);
  },
  (error) => { 
     console.log(error);
  }
);

 ~ Similarly, if you are interested in only the error, pass null as the value for the first argument.

promise.then(
  null,
  (error) => { 
      console.log(error)
  }
);

 ~ The .catch() Promise Handler
This handler method can handle errors (rejections) from promises. As we already discussed, it is a much better syntax to handle the error situation than using the .then() method. So let us now handle the "Jack fell down..." situation using JavaScript promise.

---

In Summary
To Summarize,

Promise is an important building block for the asynchronous concept in JavaScript.
You can create a promise using the constructor function.
The constructor accepts an executor function as an argument and returns a promise object.
A promise object has two internal properties, state and result. These properties are not code-accessible.
The consumer of a promise can use the .then(), .catch(), and .finally() methods to handle promises.


